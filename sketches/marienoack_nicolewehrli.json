{
  "version": "1.4.1",
  "revision": 44,
  "count": {
    "sketches": 1,
    "folders": 0
  },
  "structure": [
    {
      "type": "sketch",
      "name": "marienoack_nicolewehrli",
      "mod": 1641564006503,
      "parent": "Project",
      "code": "let credits = {\n\t\"student_names\": \"Marie Noack, Nicole Wehrli\",\n\t\"recode_id\": \"zotero2-2604593.KS48AMU4\",\n\t\"recode_timestamp\": 80,\n\t\"recode_title\": \"Frühester Vorführfilm\",\n\t\"recode_designer\": \"Peter von Arx (Dozent), Max Mathys (Dozent)\",\n\t\"recode_year\": 1970\n}\n\nlet freeze = false // freeze - mouse pressed !freeze\n\nlet myBox = 1 // different boxes var\n\nlet rotx = 0,\n\troty = 0,\n\trotz = 0\n\nlet checkbox3d\nlet checkboxInvert\nlet checkboxAudio\n\nlet colBackground\nlet colFill\nlet colStroke\n\nlet audioSize\n\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL)\n\tangleMode(DEGREES)\n\n\t//Checkbox 3d\n\tcheckbox3d = createCheckbox('3d', false)\n\tcheckbox3d.style(\"color\", \"white\")\n\tcheckbox3d.style(\"font-size\", \"17px\")\n\tcheckbox3d.style(\"font-family\", \"monospace\")\n\tcheckbox3d.position(width / 50, height / 50)\n\tcheckbox3d.changed(myCheckedEvent3d)\n\n\t//CheckboxInvert\n\tcheckboxInvert = createCheckbox('night or day', false)\n\tcheckboxInvert.style(\"color\", \"white\")\n\tcheckboxInvert.style(\"font-size\", \"17px\")\n\tcheckboxInvert.style(\"font-family\", \"monospace\")\n\tcheckboxInvert.position(width / 50, height / 10)\n\tcheckboxInvert.changed(myCheckedEventInvert)\n\n\n\t//CheckboxAudio\n\tcheckboxAudio = createCheckbox('say something', false)\n\tcheckboxAudio.style(\"color\", \"white\")\n\tcheckboxAudio.style(\"font-size\", \"17px\")\n\tcheckboxAudio.style(\"font-family\", \"monospace\")\n\tcheckboxAudio.position(width / 50, height / 5.5)\n\tcheckboxAudio.changed(myCheckedEventAudio)\n\n\tsetupAudio();\n}\n\nfunction draw() {\n\tbackground(0)\n\tcolBackground = color(255)\n\n\n\t//how fast the boxes are running & when it restarts after box 3 \n\tif(frameCount % 8 == 0 && !freeze) {\n\t\tmyBox++\n\t\tif(myBox > 3) {\n\t\t\tmyBox = 1\n\t\t}\n\t}\n\n\tif(checkbox3d.checked()) {\n\t\troty += mouseX - pmouseX\n\t\trotx += pmouseY - mouseY\n\n\t\trotateX(rotx)\n\t\trotateY(roty)\n\t\trotateZ(rotz)\n\t} else {\n\t\tortho()\n\t}\n\n\tif(checkboxInvert.checked()) {\n\t\tcolFill = color(0)\n\t\tbackground(colBackground)\n\t\tcolStroke = color(0)\n\t} else {\n\t\tcolBackground = color(0)\n\t\tcolFill = color(255)\n\t\tcolStroke = color(255)\n\t}\n\n\n\t/* audio vars: amp, ampEase, fft, waveform */\n\tif(checkboxAudio.checked()) {\n\t\tupdateAudio();\n\t\taudioSize = ampEase\n\t} else {\n\t\taudioSize = 1\n\t}\n\tboxes()\n}\n\n// end of draw\n\n\nfunction myCheckedEvent3d() {\n\tif(checkbox3d.checked()) {\n\t\tfreeze = true\n\t} else {\n\t\tfreeze = false\n\t}\n}\n\nfunction myCheckedEventInvert() {\n\tif(checkboxInvert.checked()) {\n\t\tfreeze = true\n\t} else {\n\t\tfreeze = false\n\t}\n\tif(checkboxInvert.checked()) {\n\t\tcheckboxInvert.style(\"color\", \"black\")\n\t\tcheckbox3d.style(\"color\", \"black\")\n\t\tcheckboxAudio.style(\"color\", \"black\")\n\t} else {\n\t\tcheckboxInvert.style(\"color\", \"white\")\n\t\tcheckbox3d.style(\"color\", \"white\")\n\t\tcheckboxAudio.style(\"color\", \"white\")\n\t}\n}\n\nfunction myCheckedEventAudio() {\n\tif(checkboxAudio.checked()) {\n\t\tfreeze = true\n\t} else {\n\t\tfreeze = false\n\t}\n}\n\n\n//saved boxes \nfunction boxes() {\n\t//Form 1\n\tif(myBox == 1) {\n\t\tpush()\n\n\t\trectMode(CENTER)\n\t\tfill(colFill)\n\t\tstroke(colStroke)\n\t\tbox(200 + audioSize, 200 + audioSize, 100 + audioSize) //Box mitte \n\n\n\t\tpush()\n\t\ttranslate(-50, -135, 0)\n\t\tfill(colFill)\n\t\tbox(100 + audioSize, 90 + audioSize, 100 + audioSize) // box oben links\n\t\tpop()\n\n\t\tpush()\n\t\ttranslate(-120, -20, 0)\n\t\tfill(colFill)\n\t\tbox(60 + audioSize, 140 + audioSize, 100 + audioSize) // box links \n\t\tpop()\n\n\t\tpush()\n\t\ttranslate(120, -50, 0)\n\t\tfill(colFill)\n\t\tbox(40 + audioSize, 149 + audioSize, 100 + audioSize) //box rechts \n\t\tpop()\n\n\t\tpush()\n\t\ttranslate(65, -115, 0)\n\t\tfill(colFill)\n\t\tbox(150 + audioSize, 30 + audioSize, 100 + audioSize)\n\t\tpop()\n\t\tpop()\n\t}\n\n\t//Form2\n\n\tif(myBox == 2) {\n\t\tpush()\n\t\trectMode(CENTER)\n\t\tfill(colFill)\n\t\tstroke(colStroke)\n\t\tbox(300 + audioSize, 300 + audioSize, 100 + audioSize) //Box mitte \n\n\t\tpush()\n\t\ttranslate(-25, -200, 0)\n\t\tfill(colFill)\n\t\tbox(250 + audioSize, 110 + audioSize, 100 + audioSize) // box oben links\n\t\tpop()\n\n\n\t\tpush()\n\t\ttranslate(-173, -90, 0)\n\t\tfill(colFill)\n\t\tbox(55 + audioSize, 220 + audioSize, 100 + audioSize) // box links\n\t\tpop()\n\n\t\tpush()\n\t\ttranslate(180, -65, 0)\n\t\tfill(colFill)\n\t\tbox(65 + audioSize, 170 + audioSize, 100 + audioSize) //box rechts \n\t\tpop()\n\n\t\tpush()\n\t\ttranslate(-95, 170, 0)\n\t\tfill(colFill)\n\t\tbox(110 + audioSize, 60 + audioSize, 100 + audioSize) // box links unten \n\t\tpop()\n\t\tpop()\n\t}\n\n\t// Form 3\n\n\tif(myBox == 3) {\n\n\t\trectMode(CENTER)\n\t\tpush()\n\t\ttranslate(0, 0, -100)\n\t\tfill(colFill)\n\t\tnoStroke()\n\t\tbox(100 + audioSize, 100 + audioSize, 100 + audioSize)\n\t\tpop()\n\n\t\tpush()\n\t\ttranslate(-50, -40, 0)\n\t\tfill(colFill)\n\t\tnoStroke()\n\t\tbox(75 + audioSize, 110 + audioSize, 100 + audioSize)\n\t\tpop()\n\t}\n\n}\n\n/* AUDIO INIT */\nlet mic, fftRaw, fft = [],\n\twaveform = [],\n\tamp = 0.0,\n\tampStereo = {\n\t\tl: 0.0,\n\t\tr: 0.0\n\t},\n\tampEase = 0.0,\n\tnumBins = 512,\n\tbands = 12;\n\nfunction setupAudio() {\n\tuserStartAudio();\n\tmic = new p5.AudioIn();\n\tmic.start();\n\tfftRaw = new p5.FFT(0.75, numBins);\n\tfftRaw.setInput(mic);\n}\n\nfunction updateAudio() {\n\tfftRaw.analyze();\n\tamp = mic.getLevel() * 1000; // average mixed amplitude\n\tampStereo.l = mic.amplitude.getLevel(0) * 500; // average left amplitude\n\tampStereo.r = mic.amplitude.getLevel(1) * 500; // average right amplitude\n\tampEase = ease(amp, ampEase, 0.075); // smooth 'amp'\n\twaveform = fftRaw.waveform(); // array (-1, 1)\n\tfft = fftRaw.logAverages(fftRaw.getOctaveBands(bands)); // array (0, 255)\n}"
    }
  ]
}