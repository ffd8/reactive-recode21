{
  "version": "1.4.1",
  "revision": 44,
  "count": {
    "sketches": 1,
    "folders": 0
  },
  "structure": [
    {
      "type": "sketch",
      "name": "Projekt_zusammengefÃ¼gt",
      "mod": 1641555855294,
      "code": "let credits = {\n\t\"student_names\": \"Ariane Thiel, Jana Imhof\",\n\t\"recode_id\": \"zotero2-2604593.UUVXSUVP\",\n\t\"recode_timestamp\": 34,\n\t\"recode_title\": \"Animation_4 senkrechte Balken_LIFT\",\n\t\"recode_designer\": \"Peter Olpe\",\n\t\"recode_year\": 1972\n}\nlet mySwitch = 0\nlet timer = 0\nlet timerSwitch = 10\nlet cycles = 0\nlet sliderWidth, slider3D, sliderOpacity, sliderSpeed;\nlet guiHolder, checkboxAudio, myText;\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL)\n\ttimer = millis()\n\n\tsetupGUI()\n\t//\tsetupText()\n\tsetupAudio();\n}\n\nfunction draw() {\n\tlet val1 = sliderOpacity.value()\n\tif(val1 == 1) {} else if(val1 == 0) {\n\t\tbackground(0)\n\n\t}\n\tpush()\n\tlet timeDuration = (millis() - timer) / 1000\n\tif(timeDuration > timerSwitch) {\n\t\ttimer = millis() //grabs current time\n\t\tmySwitch++\n\t\tif(mySwitch > 2) {\n\t\t\tmySwitch = 1\n\t\t\tcycles++\n\t\t\tif(cycles > 2) {\n\t\t\t\tmySwitch = 0\n\t\t\t\tcycles = 0\n\t\t\t}\n\t\t}\n\t}\n\tif(mySwitch == 0) {\n\t\ttimerSwitch = 7;\n\t\ttreppe()\n\t} else if(mySwitch == 1) {\n\t\ttimerSwitch = 4;\n\t\tmitte()\n\t} else if(mySwitch == 2) {\n\t\ttimerSwitch = 4;\n\t\tgegengleich()\n\t}\n\n}\n\nfunction treppe() {\n\tvar val2 = sliderWidth.value()\n\tlet val3 = slider3D.value()\n\tif(val3 == 1) {\n\t\trotateY(frameCount * 0.01);\n\t} else if(val3 == 0) {\n\t\tortho()\n\t}\n\tloopCount = 4\n\tfor(let i = 0; i < loopCount; i++) {\n\t\tlet bar = val2\n\t\tlet x1 = map(i, 0, loopCount, -width / 3, -width / 3 + (4 * bar))\n\t\tlet numberHeight = windowHeight * 3.5\n\t\tlet rectHeight1 = -abs((i + 1) * sin(frameCount * 0.02) * numberHeight)\n\t\tif(checkboxAudio.checked()) {\n\t\t\tupdateAudio()\n\t\t\trectHeight1 = -abs((i + 1) * sin(150) * ampEase * 40)\n\t\t}\n\n\t\tpush()\n\t\tfill(255)\n\t\ttranslate(x1, height * 3 / 2, 0)\n\t\tbox(bar, rectHeight1, bar)\n\t\tpop()\n\t}\n}\n\nfunction mitte() {\n\tvar val2 = sliderWidth.value()\n\tlet val3 = slider3D.value()\n\tif(val3 == 1) {\n\t\trotateY(frameCount * 0.01);\n\t} else if(val3 == 0) {\n\t\tortho()\n\t}\n\tlet val4 = sliderSpeed.value()\n\tloopCount1 = 2\n\tfor(let i = 0; i < loopCount1; i++) {\n\t\tlet bar = val2;\n\t\tlet x1 = map(i, 0, loopCount1, -width / 3, -width / 3 + (bar * 6))\n\t\tlet numberHeight1 = windowHeight * 5\n\t\tlet rectHeight1 = abs(sin(frameCount * val4) * numberHeight1)\n\t\tpush()\n\t\tif(checkboxAudio.checked()) {\n\t\t\tupdateAudio()\n\t\t\trectHeight1 = abs(sin(150) * ampEase * 60)\n\t\t}\n\t\tpop()\n\n\t\tpush()\n\t\tfill(255)\n\t\ttranslate(x1, height / 2 + 200, 0)\n\t\tbox(bar, rectHeight1, bar)\n\t\tpop()\n\t}\n\tloopCount2 = 2\n\tfor(let i = 0; i < loopCount2; i++) {\n\t\tlet bar = val2\n\t\tlet x2 = map(i, 0, loopCount2, -width / 3 + bar, -width / 3 + (bar * 3))\n\t\tlet numberHeight2 = windowHeight * 4.5\n\t\tlet rectHeight2 = sin(frameCount * 0.025) * numberHeight2\n\t\tpush()\n\t\ttranslate(x2, height * 3 / 2, 0)\n\t\tfill(255)\n\t\tbox(bar, rectHeight2, bar)\n\t\tpop()\n\t}\n}\n\nfunction gegengleich() {\n\tvar val2 = sliderWidth.value()\n\tlet val3 = slider3D.value()\n\tif(val3 == 1) {\n\t\trotateY(frameCount * 0.01);\n\t} else if(val3 == 0) {\n\t\tortho()\n\t}\n\tlet val4 = sliderSpeed.value()\n\tloopCount3 = 2\n\tfor(let i = 0; i < loopCount3; i++) {\n\t\tlet bar = val2\n\t\tlet x3 = map(i, 0, loopCount3, -width / 3, -width / 3 + (bar * 4))\n\t\tlet numberHeight3 = windowHeight * 4\n\t\tlet rectHeight3 = -abs(sin(frameCount * val4) * numberHeight3)\n\t\tpush()\n\t\tif(checkboxAudio.checked()) {\n\t\t\tupdateAudio()\n\t\t\trectHeight3 = abs(sin(150) * ampEase * 60)\n\t\t}\n\t\tpop()\n\t\tpush()\n\t\tfill(255)\n\t\ttranslate(x3, height * 2.2 / 2, 0)\n\t\tbox(bar, rectHeight3, bar)\n\t\tpop()\n\t}\n\n\tloopCount2 = 2\n\tfor(let i = 0; i < loopCount2; i++) {\n\t\tlet bar = val2\n\t\tlet x4 = map(i, 0, loopCount2, -width / 3 + bar, -width / 3 + (bar * 5))\n\t\tlet numberHeight4 = windowHeight * 4.5\n\t\tlet rectHeight4 = sin(frameCount * 0.025) * numberHeight4\n\t\tpush()\n\t\tfill(255)\n\t\ttranslate(x4, height * 3 / 2, 0)\n\t\tbox(bar, rectHeight4, bar)\n\t\tpop()\n\t}\n}\n\nfunction setupGUI() {\n\tguiHolder = createElement('div')\n\tguiHolder.class('gui-holder')\n\n\tcreateElement('style', `\n\t.gui-holder{\n\t\tposition:fixed;\n\t\tright:20px;\n\t\ttop:100px;\n\t\tcolor:#fff;\n\t\tborder:1px solid #fff;\n\t\tfont-family:monospace;\n\t\theight:240px;\n\t\twidth:120px;\n\t\t\n\t}\n\t`)\n\tlabelText('Background')\n\tsliderOpacity = createSlider(0, 1, 0);\n\tsliderOpacity.parent(guiHolder);\n\tsliderOpacity.style('width', '80px');\n\n\tlabelText('Width')\n\tsliderWidth = createSlider(50, 250, 250, 10);\n\tsliderWidth.parent(guiHolder);\n\tsliderWidth.style('width', '80px');\n\n\tlabelText('Speed')\n\tsliderSpeed = createSlider(0.03, 0.07, 0.03, 0.005);\n\tsliderSpeed.parent(guiHolder);\n\tsliderSpeed.style('width', '80px');\n\n\tlabelText('3D')\n\tslider3D = createSlider(0, 1, 0, 0.1);\n\tslider3D.parent(guiHolder);\n\tslider3D.style('width', '80px');\n\n\tcheckboxAudio = createCheckbox('Talk to me', false)\n\tcheckboxAudio.parent(guiHolder)\n\tcheckboxAudio.style('color', '#fff')\n\tcheckboxAudio.style('font-family', 'monospace')\n\n}\n\nfunction labelText(txt) {\n\tmyText = createElement('div', txt)\n\tmyText.parent(guiHolder)\n\tmyText.class('my-text')\n\n\tcreateElement('style', `\n\t .my-text{\n\t margin:8px;\n\t }\n\t`)\n}\n\n\n\n/* AUDIO INIT */\nlet mic, fftRaw, fft = [],\n\twaveform = [],\n\tamp = 0.0,\n\tampStereo = {\n\t\tl: 0.0,\n\t\tr: 0.0\n\t},\n\tampEase = 0.0,\n\tnumBins = 512,\n\tbands = 12;\n\nfunction setupAudio() {\n\tuserStartAudio();\n\tmic = new p5.AudioIn();\n\tmic.start();\n\tfftRaw = new p5.FFT(0.75, numBins);\n\tfftRaw.setInput(mic);\n}\n\nfunction updateAudio() {\n\tfftRaw.analyze();\n\tamp = mic.getLevel() * 1000; // average mixed amplitude\n\tampStereo.l = mic.amplitude.getLevel(0) * 500; // average left amplitude\n\tampStereo.r = mic.amplitude.getLevel(1) * 500; // average right amplitude\n\tampEase = ease(amp, ampEase, 0.075); // smooth 'amp'\n\twaveform = fftRaw.waveform(); // array (-1, 1)\n\tfft = fftRaw.logAverages(fftRaw.getOctaveBands(bands)); // array (0, 255)\n}"
    }
  ]
}